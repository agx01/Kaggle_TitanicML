{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "30350475",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:32.952569Z",
     "iopub.status.busy": "2024-07-31T15:00:32.952168Z",
     "iopub.status.idle": "2024-07-31T15:00:33.838816Z",
     "shell.execute_reply": "2024-07-31T15:00:33.837626Z"
    },
    "papermill": {
     "duration": 0.897791,
     "end_time": "2024-07-31T15:00:33.841513",
     "exception": false,
     "start_time": "2024-07-31T15:00:32.943722",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "70ca0d98",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:33.856370Z",
     "iopub.status.busy": "2024-07-31T15:00:33.855539Z",
     "iopub.status.idle": "2024-07-31T15:00:35.786607Z",
     "shell.execute_reply": "2024-07-31T15:00:35.785311Z"
    },
    "papermill": {
     "duration": 1.941224,
     "end_time": "2024-07-31T15:00:35.789208",
     "exception": false,
     "start_time": "2024-07-31T15:00:33.847984",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.svm import SVC\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import RocCurveDisplay\n",
    "from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, roc_curve, roc_auc_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "0efadb32",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:35.803942Z",
     "iopub.status.busy": "2024-07-31T15:00:35.803553Z",
     "iopub.status.idle": "2024-07-31T15:00:35.845324Z",
     "shell.execute_reply": "2024-07-31T15:00:35.844309Z"
    },
    "papermill": {
     "duration": 0.051731,
     "end_time": "2024-07-31T15:00:35.847632",
     "exception": false,
     "start_time": "2024-07-31T15:00:35.795901",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_data = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "display(train_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "7ecfb7cc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:35.862782Z",
     "iopub.status.busy": "2024-07-31T15:00:35.862359Z",
     "iopub.status.idle": "2024-07-31T15:00:35.883947Z",
     "shell.execute_reply": "2024-07-31T15:00:35.882675Z"
    },
    "papermill": {
     "duration": 0.032507,
     "end_time": "2024-07-31T15:00:35.887073",
     "exception": false,
     "start_time": "2024-07-31T15:00:35.854566",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>892</td>\n",
       "      <td>3</td>\n",
       "      <td>Kelly, Mr. James</td>\n",
       "      <td>male</td>\n",
       "      <td>34.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>330911</td>\n",
       "      <td>7.8292</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>893</td>\n",
       "      <td>3</td>\n",
       "      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n",
       "      <td>female</td>\n",
       "      <td>47.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>363272</td>\n",
       "      <td>7.0000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>894</td>\n",
       "      <td>2</td>\n",
       "      <td>Myles, Mr. Thomas Francis</td>\n",
       "      <td>male</td>\n",
       "      <td>62.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>240276</td>\n",
       "      <td>9.6875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Q</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>895</td>\n",
       "      <td>3</td>\n",
       "      <td>Wirz, Mr. Albert</td>\n",
       "      <td>male</td>\n",
       "      <td>27.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>315154</td>\n",
       "      <td>8.6625</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>896</td>\n",
       "      <td>3</td>\n",
       "      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n",
       "      <td>female</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3101298</td>\n",
       "      <td>12.2875</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Pclass                                          Name     Sex  \\\n",
       "0          892       3                              Kelly, Mr. James    male   \n",
       "1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n",
       "2          894       2                     Myles, Mr. Thomas Francis    male   \n",
       "3          895       3                              Wirz, Mr. Albert    male   \n",
       "4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n",
       "\n",
       "    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n",
       "0  34.5      0      0   330911   7.8292   NaN        Q  \n",
       "1  47.0      1      0   363272   7.0000   NaN        S  \n",
       "2  62.0      0      0   240276   9.6875   NaN        Q  \n",
       "3  27.0      0      0   315154   8.6625   NaN        S  \n",
       "4  22.0      1      1  3101298  12.2875   NaN        S  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_data = pd.read_csv('/kaggle/input/titanic/test.csv')\n",
    "display(test_data.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "57c09d3c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:35.903088Z",
     "iopub.status.busy": "2024-07-31T15:00:35.902588Z",
     "iopub.status.idle": "2024-07-31T15:00:35.927593Z",
     "shell.execute_reply": "2024-07-31T15:00:35.926154Z"
    },
    "papermill": {
     "duration": 0.036033,
     "end_time": "2024-07-31T15:00:35.930018",
     "exception": false,
     "start_time": "2024-07-31T15:00:35.893985",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "c52da60f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:35.945549Z",
     "iopub.status.busy": "2024-07-31T15:00:35.945127Z",
     "iopub.status.idle": "2024-07-31T15:00:35.975336Z",
     "shell.execute_reply": "2024-07-31T15:00:35.974235Z"
    },
    "papermill": {
     "duration": 0.040942,
     "end_time": "2024-07-31T15:00:35.977917",
     "exception": false,
     "start_time": "2024-07-31T15:00:35.936975",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId    Survived      Pclass         Age       SibSp  \\\n",
       "count   891.000000  891.000000  891.000000  714.000000  891.000000   \n",
       "mean    446.000000    0.383838    2.308642   29.699118    0.523008   \n",
       "std     257.353842    0.486592    0.836071   14.526497    1.102743   \n",
       "min       1.000000    0.000000    1.000000    0.420000    0.000000   \n",
       "25%     223.500000    0.000000    2.000000   20.125000    0.000000   \n",
       "50%     446.000000    0.000000    3.000000   28.000000    0.000000   \n",
       "75%     668.500000    1.000000    3.000000   38.000000    1.000000   \n",
       "max     891.000000    1.000000    3.000000   80.000000    8.000000   \n",
       "\n",
       "            Parch        Fare  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.381594   32.204208  \n",
       "std      0.806057   49.693429  \n",
       "min      0.000000    0.000000  \n",
       "25%      0.000000    7.910400  \n",
       "50%      0.000000   14.454200  \n",
       "75%      0.000000   31.000000  \n",
       "max      6.000000  512.329200  "
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "715ff61c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:35.993770Z",
     "iopub.status.busy": "2024-07-31T15:00:35.993354Z",
     "iopub.status.idle": "2024-07-31T15:00:36.004676Z",
     "shell.execute_reply": "2024-07-31T15:00:36.003485Z"
    },
    "papermill": {
     "duration": 0.022131,
     "end_time": "2024-07-31T15:00:36.007308",
     "exception": false,
     "start_time": "2024-07-31T15:00:35.985177",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    }
   ],
   "source": [
    "test_data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "af54c4f2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.023443Z",
     "iopub.status.busy": "2024-07-31T15:00:36.023044Z",
     "iopub.status.idle": "2024-07-31T15:00:36.049169Z",
     "shell.execute_reply": "2024-07-31T15:00:36.048095Z"
    },
    "papermill": {
     "duration": 0.036908,
     "end_time": "2024-07-31T15:00:36.051573",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.014665",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>332.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>418.000000</td>\n",
       "      <td>417.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>2.265550</td>\n",
       "      <td>30.272590</td>\n",
       "      <td>0.447368</td>\n",
       "      <td>0.392344</td>\n",
       "      <td>35.627188</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>120.810458</td>\n",
       "      <td>0.841838</td>\n",
       "      <td>14.181209</td>\n",
       "      <td>0.896760</td>\n",
       "      <td>0.981429</td>\n",
       "      <td>55.907576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>892.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.170000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>996.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>21.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.895800</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1100.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1204.750000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>39.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1309.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>76.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>512.329200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       PassengerId      Pclass         Age       SibSp       Parch        Fare\n",
       "count   418.000000  418.000000  332.000000  418.000000  418.000000  417.000000\n",
       "mean   1100.500000    2.265550   30.272590    0.447368    0.392344   35.627188\n",
       "std     120.810458    0.841838   14.181209    0.896760    0.981429   55.907576\n",
       "min     892.000000    1.000000    0.170000    0.000000    0.000000    0.000000\n",
       "25%     996.250000    1.000000   21.000000    0.000000    0.000000    7.895800\n",
       "50%    1100.500000    3.000000   27.000000    0.000000    0.000000   14.454200\n",
       "75%    1204.750000    3.000000   39.000000    1.000000    0.000000   31.500000\n",
       "max    1309.000000    3.000000   76.000000    8.000000    9.000000  512.329200"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "e48bb948",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.068259Z",
     "iopub.status.busy": "2024-07-31T15:00:36.067864Z",
     "iopub.status.idle": "2024-07-31T15:00:36.080348Z",
     "shell.execute_reply": "2024-07-31T15:00:36.079264Z"
    },
    "papermill": {
     "duration": 0.023564,
     "end_time": "2024-07-31T15:00:36.082624",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.059060",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class DataPrep:\n",
    "    \n",
    "    def __init__(self, data):\n",
    "        self.data = data\n",
    "        pass\n",
    "    \n",
    "    def remove_columns(self, drop_cols):\n",
    "        self.data = self.data.drop(drop_cols, axis=1)\n",
    "    \n",
    "    def fillna_w_means(self, cols_for_mean):\n",
    "        for col in cols_for_mean:\n",
    "            self.data[col] = self.data[col].fillna(self.data[col].mean())\n",
    "    \n",
    "    def fillna_w_maxvals(self, cols_for_maxvals):\n",
    "        for col in cols_for_maxvals:\n",
    "            most_frequent_value = self.data[col].mode()[0]\n",
    "            self.data[col] = self.data[col].fillna(most_frequent_value)\n",
    "            \n",
    "    def one_hot_encode_cols(self, cols_for_oneHotEncode):\n",
    "        for col in cols_for_oneHotEncode:\n",
    "            dummy_vals = pd.get_dummies(self.data[col], dtype='int')\n",
    "            self.data = pd.concat([self.data, dummy_vals], axis=1)\n",
    "        \n",
    "        self.remove_columns(cols_for_oneHotEncode)\n",
    "    \n",
    "    def return_X_y(self, y_col):\n",
    "        if y_col in self.data.columns:\n",
    "            y = self.data[y_col]\n",
    "            X = self.data.drop(y_col, axis=1)\n",
    "            return X, y\n",
    "        else:\n",
    "            X = self.data\n",
    "            return X\n",
    "    \n",
    "    def check_info(self):\n",
    "        display(self.data.info())\n",
    "        \n",
    "    def preprocess_data(self, drop_cols, cols_for_mean, cols_for_maxvals, cols_for_oneHotEncode):\n",
    "        display(\"Starting structure and data\")\n",
    "        self.check_info()\n",
    "        \n",
    "        display(\"Remove unwanted columns\")\n",
    "        self.remove_columns(drop_cols)\n",
    "        \n",
    "        display(\"Current structure and data\")\n",
    "        self.check_info()\n",
    "        \n",
    "        display(f\"Add mean values for the columns: {cols_for_mean}\")\n",
    "        self.fillna_w_means(cols_for_mean)\n",
    "        \n",
    "        display(\"Current structure and data\")\n",
    "        self.check_info()\n",
    "        \n",
    "        display(f\"Add max values for the columns: {cols_for_maxvals}\")\n",
    "        self.fillna_w_maxvals(cols_for_maxvals)\n",
    "        \n",
    "        display(\"Current structure and data\")\n",
    "        self.check_info()\n",
    "        \n",
    "        display(f\"Add max values for the columns: {cols_for_oneHotEncode}\")\n",
    "        self.one_hot_encode_cols(cols_for_oneHotEncode)\n",
    "        \n",
    "        display(\"Current structure and data\")\n",
    "        self.check_info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "28bdffba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.099307Z",
     "iopub.status.busy": "2024-07-31T15:00:36.098914Z",
     "iopub.status.idle": "2024-07-31T15:00:36.111753Z",
     "shell.execute_reply": "2024-07-31T15:00:36.110682Z"
    },
    "papermill": {
     "duration": 0.024115,
     "end_time": "2024-07-31T15:00:36.114268",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.090153",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "class ModelPerformance:\n",
    "    \n",
    "    def __init__(self, model, X, y):\n",
    "        self.model = model\n",
    "        self.X = X\n",
    "        self.y = y\n",
    "        self.y_pred = self.build_y_pred()\n",
    "        self.y_pred_prob = self.build_y_pred_proba()\n",
    "        self.accuracy = 0\n",
    "        self.precision = 0\n",
    "        self.recall = 0\n",
    "        self.f1_score = 0\n",
    "    \n",
    "    def build_y_pred(self):\n",
    "        return self.model.predict(self.X)\n",
    "    \n",
    "    def build_y_pred_proba(self):\n",
    "        return self.model.predict_proba(self.X)[:,1]\n",
    "        \n",
    "    def create_accuracy_score(self):\n",
    "        self.accuracy = accuracy_score(self.y, self.y_pred)\n",
    "        print(f\"Accuracy: {self.accuracy:.2f}\")\n",
    "        \n",
    "    def create_precision_score(self):\n",
    "        self.precision = precision_score(self.y, self.y_pred)\n",
    "        print(f\"Precision: {self.precision:.2f}\")\n",
    "    \n",
    "    def create_recall_score(self):\n",
    "        self.recall = recall_score(self.y, self.y_pred)\n",
    "        print(f\"Recall: {self.recall:.2f}\")\n",
    "        \n",
    "    def create_f1_score(self):\n",
    "        self.f1_score = f1_score(self.y, self.y_pred)\n",
    "        print(f\"F1 Score: {self.f1_score:.2f}\")\n",
    "        \n",
    "    def create_tpr_fpr(self):\n",
    "        self.fpr, self.tpr, self.threshold = metrics.roc_curve(self.y, self.y_pred)\n",
    "        print(f\"True Positive Rate: {self.tpr}, False Positive Rate: {self.fpr}\")\n",
    "    \n",
    "    def create_auc_value(self):\n",
    "        self.auc_value = metrics.auc(self.fpr, self.tpr)\n",
    "        print(f\"AUC: {self.auc_value:.2f}\")\n",
    "        \n",
    "    def calculate_metrics(self):\n",
    "        self.create_accuracy_score()\n",
    "        \n",
    "        self.create_precision_score()\n",
    "        \n",
    "        self.create_recall_score()\n",
    "        \n",
    "        self.create_f1_score()\n",
    "        \n",
    "        self.create_tpr_fpr()\n",
    "        \n",
    "        self.create_auc_value()\n",
    "    \n",
    "    def build_roc_plot(self):\n",
    "        auc_value = roc_auc_score(self.y, self.y_pred_prob)\n",
    "        \n",
    "        plt.figure(figsize=(10, 8))\n",
    "        plt.plot(self.fpr, self.tpr, color='orange', label='ROC')\n",
    "        plt.plot([0,0], [1, 1], color='darkblue', linestyle='--')\n",
    "        plt.xlabel('False Positive Rate')\n",
    "        plt.ylabel('True Positive Rate')\n",
    "        plt.title('Receiver Operating Characteristic (ROC) Curve')\n",
    "        plt.legend()\n",
    "        plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "398bb25a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.131371Z",
     "iopub.status.busy": "2024-07-31T15:00:36.130451Z",
     "iopub.status.idle": "2024-07-31T15:00:36.135657Z",
     "shell.execute_reply": "2024-07-31T15:00:36.134575Z"
    },
    "papermill": {
     "duration": 0.016141,
     "end_time": "2024-07-31T15:00:36.138002",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.121861",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "drop_cols = ['PassengerId', 'Cabin', 'Name', 'Ticket']\n",
    "cols_for_mean = ['Age']\n",
    "cols_for_maxvals = ['Embarked']\n",
    "cols_for_oneHotEncode = ['Sex', 'Embarked']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ec252a4d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.155352Z",
     "iopub.status.busy": "2024-07-31T15:00:36.154954Z",
     "iopub.status.idle": "2024-07-31T15:00:36.225328Z",
     "shell.execute_reply": "2024-07-31T15:00:36.223972Z"
    },
    "papermill": {
     "duration": 0.082026,
     "end_time": "2024-07-31T15:00:36.227564",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.145538",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Starting structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Remove unwanted columns'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Sex       891 non-null    object \n",
      " 3   Age       714 non-null    float64\n",
      " 4   SibSp     891 non-null    int64  \n",
      " 5   Parch     891 non-null    int64  \n",
      " 6   Fare      891 non-null    float64\n",
      " 7   Embarked  889 non-null    object \n",
      "dtypes: float64(2), int64(4), object(2)\n",
      "memory usage: 55.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add mean values for the columns: ['Age']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Sex       891 non-null    object \n",
      " 3   Age       891 non-null    float64\n",
      " 4   SibSp     891 non-null    int64  \n",
      " 5   Parch     891 non-null    int64  \n",
      " 6   Fare      891 non-null    float64\n",
      " 7   Embarked  889 non-null    object \n",
      "dtypes: float64(2), int64(4), object(2)\n",
      "memory usage: 55.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add max values for the columns: ['Embarked']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 8 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Sex       891 non-null    object \n",
      " 3   Age       891 non-null    float64\n",
      " 4   SibSp     891 non-null    int64  \n",
      " 5   Parch     891 non-null    int64  \n",
      " 6   Fare      891 non-null    float64\n",
      " 7   Embarked  891 non-null    object \n",
      "dtypes: float64(2), int64(4), object(2)\n",
      "memory usage: 55.8+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add max values for the columns: ['Sex', 'Embarked']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 11 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Survived  891 non-null    int64  \n",
      " 1   Pclass    891 non-null    int64  \n",
      " 2   Age       891 non-null    float64\n",
      " 3   SibSp     891 non-null    int64  \n",
      " 4   Parch     891 non-null    int64  \n",
      " 5   Fare      891 non-null    float64\n",
      " 6   female    891 non-null    int64  \n",
      " 7   male      891 non-null    int64  \n",
      " 8   C         891 non-null    int64  \n",
      " 9   Q         891 non-null    int64  \n",
      " 10  S         891 non-null    int64  \n",
      "dtypes: float64(2), int64(9)\n",
      "memory usage: 76.7 KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "train_data_prep = DataPrep(train_data)\n",
    "train_data_prep.preprocess_data(drop_cols, cols_for_mean, cols_for_maxvals, cols_for_oneHotEncode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "502016ad",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.248498Z",
     "iopub.status.busy": "2024-07-31T15:00:36.247306Z",
     "iopub.status.idle": "2024-07-31T15:00:36.252918Z",
     "shell.execute_reply": "2024-07-31T15:00:36.251806Z"
    },
    "papermill": {
     "duration": 0.018408,
     "end_time": "2024-07-31T15:00:36.255239",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.236831",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "drop_cols = ['PassengerId', 'Cabin', 'Name', 'Ticket']\n",
    "cols_for_mean = ['Age', 'Fare']\n",
    "cols_for_maxvals = ['Embarked']\n",
    "cols_for_oneHotEncode = ['Sex', 'Embarked']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ed0a687c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.275770Z",
     "iopub.status.busy": "2024-07-31T15:00:36.275343Z",
     "iopub.status.idle": "2024-07-31T15:00:36.341046Z",
     "shell.execute_reply": "2024-07-31T15:00:36.339836Z"
    },
    "papermill": {
     "duration": 0.078978,
     "end_time": "2024-07-31T15:00:36.343488",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.264510",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'Starting structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 11 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  418 non-null    int64  \n",
      " 1   Pclass       418 non-null    int64  \n",
      " 2   Name         418 non-null    object \n",
      " 3   Sex          418 non-null    object \n",
      " 4   Age          332 non-null    float64\n",
      " 5   SibSp        418 non-null    int64  \n",
      " 6   Parch        418 non-null    int64  \n",
      " 7   Ticket       418 non-null    object \n",
      " 8   Fare         417 non-null    float64\n",
      " 9   Cabin        91 non-null     object \n",
      " 10  Embarked     418 non-null    object \n",
      "dtypes: float64(2), int64(4), object(5)\n",
      "memory usage: 36.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Remove unwanted columns'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Pclass    418 non-null    int64  \n",
      " 1   Sex       418 non-null    object \n",
      " 2   Age       332 non-null    float64\n",
      " 3   SibSp     418 non-null    int64  \n",
      " 4   Parch     418 non-null    int64  \n",
      " 5   Fare      417 non-null    float64\n",
      " 6   Embarked  418 non-null    object \n",
      "dtypes: float64(2), int64(3), object(2)\n",
      "memory usage: 23.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add mean values for the columns: ['Age', 'Fare']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Pclass    418 non-null    int64  \n",
      " 1   Sex       418 non-null    object \n",
      " 2   Age       418 non-null    float64\n",
      " 3   SibSp     418 non-null    int64  \n",
      " 4   Parch     418 non-null    int64  \n",
      " 5   Fare      418 non-null    float64\n",
      " 6   Embarked  418 non-null    object \n",
      "dtypes: float64(2), int64(3), object(2)\n",
      "memory usage: 23.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add max values for the columns: ['Embarked']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 7 columns):\n",
      " #   Column    Non-Null Count  Dtype  \n",
      "---  ------    --------------  -----  \n",
      " 0   Pclass    418 non-null    int64  \n",
      " 1   Sex       418 non-null    object \n",
      " 2   Age       418 non-null    float64\n",
      " 3   SibSp     418 non-null    int64  \n",
      " 4   Parch     418 non-null    int64  \n",
      " 5   Fare      418 non-null    float64\n",
      " 6   Embarked  418 non-null    object \n",
      "dtypes: float64(2), int64(3), object(2)\n",
      "memory usage: 23.0+ KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "\"Add max values for the columns: ['Sex', 'Embarked']\""
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "'Current structure and data'"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 418 entries, 0 to 417\n",
      "Data columns (total 10 columns):\n",
      " #   Column  Non-Null Count  Dtype  \n",
      "---  ------  --------------  -----  \n",
      " 0   Pclass  418 non-null    int64  \n",
      " 1   Age     418 non-null    float64\n",
      " 2   SibSp   418 non-null    int64  \n",
      " 3   Parch   418 non-null    int64  \n",
      " 4   Fare    418 non-null    float64\n",
      " 5   female  418 non-null    int64  \n",
      " 6   male    418 non-null    int64  \n",
      " 7   C       418 non-null    int64  \n",
      " 8   Q       418 non-null    int64  \n",
      " 9   S       418 non-null    int64  \n",
      "dtypes: float64(2), int64(8)\n",
      "memory usage: 32.8 KB\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "None"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "test_data_prep = DataPrep(test_data)\n",
    "test_data_prep.preprocess_data(drop_cols, cols_for_mean, cols_for_maxvals, cols_for_oneHotEncode)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b369a41b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.366867Z",
     "iopub.status.busy": "2024-07-31T15:00:36.366492Z",
     "iopub.status.idle": "2024-07-31T15:00:36.372415Z",
     "shell.execute_reply": "2024-07-31T15:00:36.371487Z"
    },
    "papermill": {
     "duration": 0.020013,
     "end_time": "2024-07-31T15:00:36.374535",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.354522",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X, y = train_data_prep.return_X_y('Survived')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "efbcce9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.398494Z",
     "iopub.status.busy": "2024-07-31T15:00:36.397500Z",
     "iopub.status.idle": "2024-07-31T15:00:36.402457Z",
     "shell.execute_reply": "2024-07-31T15:00:36.401455Z"
    },
    "papermill": {
     "duration": 0.019613,
     "end_time": "2024-07-31T15:00:36.405139",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.385526",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "X_test = test_data_prep.return_X_y('Survived')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "3a3bbe12",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.429422Z",
     "iopub.status.busy": "2024-07-31T15:00:36.428597Z",
     "iopub.status.idle": "2024-07-31T15:00:36.443671Z",
     "shell.execute_reply": "2024-07-31T15:00:36.442670Z"
    },
    "papermill": {
     "duration": 0.0293,
     "end_time": "2024-07-31T15:00:36.445787",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.416487",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>female</th>\n",
       "      <th>male</th>\n",
       "      <th>C</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>3</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>886</th>\n",
       "      <td>2</td>\n",
       "      <td>27.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>887</th>\n",
       "      <td>1</td>\n",
       "      <td>19.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>888</th>\n",
       "      <td>3</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>23.4500</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>889</th>\n",
       "      <td>1</td>\n",
       "      <td>26.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>30.0000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>890</th>\n",
       "      <td>3</td>\n",
       "      <td>32.000000</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7.7500</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>891 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Pclass        Age  SibSp  Parch     Fare  female  male  C  Q  S\n",
       "0         3  22.000000      1      0   7.2500       0     1  0  0  1\n",
       "1         1  38.000000      1      0  71.2833       1     0  1  0  0\n",
       "2         3  26.000000      0      0   7.9250       1     0  0  0  1\n",
       "3         1  35.000000      1      0  53.1000       1     0  0  0  1\n",
       "4         3  35.000000      0      0   8.0500       0     1  0  0  1\n",
       "..      ...        ...    ...    ...      ...     ...   ... .. .. ..\n",
       "886       2  27.000000      0      0  13.0000       0     1  0  0  1\n",
       "887       1  19.000000      0      0  30.0000       1     0  0  0  1\n",
       "888       3  29.699118      1      2  23.4500       1     0  0  0  1\n",
       "889       1  26.000000      0      0  30.0000       0     1  1  0  0\n",
       "890       3  32.000000      0      0   7.7500       0     1  0  1  0\n",
       "\n",
       "[891 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "79a17b7e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.470295Z",
     "iopub.status.busy": "2024-07-31T15:00:36.469933Z",
     "iopub.status.idle": "2024-07-31T15:00:36.511270Z",
     "shell.execute_reply": "2024-07-31T15:00:36.510020Z"
    },
    "papermill": {
     "duration": 0.056279,
     "end_time": "2024-07-31T15:00:36.513438",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.457159",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/opt/conda/lib/python3.10/site-packages/sklearn/linear_model/_logistic.py:458: ConvergenceWarning: lbfgs failed to converge (status=1):\n",
      "STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n",
      "\n",
      "Increase the number of iterations (max_iter) or scale the data as shown in:\n",
      "    https://scikit-learn.org/stable/modules/preprocessing.html\n",
      "Please also refer to the documentation for alternative solver options:\n",
      "    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n",
      "  n_iter_i = _check_optimize_result(\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "0.8002244668911336"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_model = LogisticRegression(random_state=0).fit(X, y)\n",
    "lr_y_test = lr_model.predict(X_test)\n",
    "lr_model.score(X,y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "4dfc33dc",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.538111Z",
     "iopub.status.busy": "2024-07-31T15:00:36.537743Z",
     "iopub.status.idle": "2024-07-31T15:00:36.743416Z",
     "shell.execute_reply": "2024-07-31T15:00:36.742453Z"
    },
    "papermill": {
     "duration": 0.220559,
     "end_time": "2024-07-31T15:00:36.745607",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.525048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7856341189674523"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfc = RandomForestClassifier(max_depth=2, random_state=0)\n",
    "\n",
    "rfc.fit(X, y)\n",
    "rfc_y_test = rfc.predict(X_test)\n",
    "rfc.score(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "5dfdf12b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:36.770927Z",
     "iopub.status.busy": "2024-07-31T15:00:36.770035Z",
     "iopub.status.idle": "2024-07-31T15:00:37.192280Z",
     "shell.execute_reply": "2024-07-31T15:00:37.191058Z"
    },
    "papermill": {
     "duration": 0.437395,
     "end_time": "2024-07-31T15:00:37.194644",
     "exception": false,
     "start_time": "2024-07-31T15:00:36.757249",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 800x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr_df = X.corr(method='pearson')\n",
    "fig, ax = plt.subplots(figsize=(8,6))\n",
    "plt.title(\"Correlation plot\")\n",
    "sns.heatmap(corr_df, mask=np.zeros_like(corr_df, dtype=bool), cmap=sns.diverging_palette(220, 10, as_cmap=True), square=True, ax=ax)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "392288fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:37.221235Z",
     "iopub.status.busy": "2024-07-31T15:00:37.220549Z",
     "iopub.status.idle": "2024-07-31T15:00:37.272416Z",
     "shell.execute_reply": "2024-07-31T15:00:37.271214Z"
    },
    "papermill": {
     "duration": 0.068343,
     "end_time": "2024-07-31T15:00:37.275218",
     "exception": false,
     "start_time": "2024-07-31T15:00:37.206875",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Logistic Regression Model Performance\n",
      "Accuracy: 0.80\n",
      "Precision: 0.76\n",
      "Recall: 0.70\n",
      "F1 Score: 0.73\n",
      "True Positive Rate: [0.         0.69883041 1.        ], False Positive Rate: [0.         0.13661202 1.        ]\n",
      "AUC: 0.78\n",
      "Random Forest Classifier Model Performance\n",
      "Accuracy: 0.79\n",
      "Precision: 0.74\n",
      "Recall: 0.68\n",
      "F1 Score: 0.71\n",
      "True Positive Rate: [0.         0.67836257 1.        ], False Positive Rate: [0.         0.14754098 1.        ]\n",
      "AUC: 0.77\n"
     ]
    }
   ],
   "source": [
    "lr_model_perf = ModelPerformance(lr_model, X,y)\n",
    "rfc_model_perf = ModelPerformance(rfc, X, y)\n",
    "\n",
    "print(\"Logistic Regression Model Performance\")\n",
    "lr_model_perf.calculate_metrics()\n",
    "\n",
    "print(\"Random Forest Classifier Model Performance\")\n",
    "rfc_model_perf.calculate_metrics()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "0f2e24fe",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:37.302829Z",
     "iopub.status.busy": "2024-07-31T15:00:37.302033Z",
     "iopub.status.idle": "2024-07-31T15:00:37.600592Z",
     "shell.execute_reply": "2024-07-31T15:00:37.599492Z"
    },
    "papermill": {
     "duration": 0.314635,
     "end_time": "2024-07-31T15:00:37.603069",
     "exception": false,
     "start_time": "2024-07-31T15:00:37.288434",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "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db8/JJlJkyaZ//znP6ZLly4mICDAfPjhh86xWbNmOffNzs42N954o/P7Mi4uzowePdr88MMPVdZUeg6/+uqrbl9/06ZNZty4cSY2NtaEhISYDh06lAseFTnhhBPM5ZdfXm57RcHJGGPOP/98I8ns27fPue3tt982ksw999xT4dc4dOiQiYqKMp06dXJue+edd4wkc//991dZY6mNGzcaSeaDDz446n6enrsTJkyoMKSWntNlVfT3/O6775ro6OgK38esrCwTHBxsbrnlFue26p5TAI6u+nP4AHxC6WU60dHRzm2//vqrBg0apObNm2vatGlq1KiR3n33XY0dO1bvv/++zjnnHEnS4cOHNWTIEG3atElXXHGFevXqpYyMDC1atEh//vmnYmNjZbfbddZZZ2n16tW6+uqr1blzZ/3888967LHHtHXrVn300UcV1tWnTx+1adNG7777riZMmOA2tmDBAkVHRys5OVmS43K6f/zjH7LZbJo8ebLi4uL0v//9T1deeaWys7N10003uR1/7733KigoSFOnTlVBQUGll6h9/PHHkqTLLruswvGAgABdfPHFmj17ttasWaPRo0c7x15//XXl5ORo0qRJys/P1xNPPKGRI0fq559/VkJCgkfvc6nrrrtOcXFxmjlzpnJzcyVJ69at09dff60LL7xQLVq00K5du/Tcc89p+PDh+u233xQWFqahQ4fqhhtu0JNPPqk77rhDnTt3liTnn5V58MEH5efnp6lTpyorK0sPP/ywLrnkEn377bfOfZ577jlNnjxZQ4YM0c0336xdu3Zp7Nixio6OrvISpf/9738qLi7WpZdeetT9/u6CCy5Q69atNWfOHK1fv14vvfSS4uPj9dBDD7nVdeKJJ+qss85SQECAPv74Y1133XWy2+2aNGmS2/Nt2bJFF110kf71r3/pqquuUseOHT16jvnz5+uKK67QiSeeqOnTpysqKko//vijFi9erIsvvlh33nmnsrKy9Oeff+qxxx6TJDVu3FiSPP7++OKLL/Tuu+9q8uTJio2NVatWrSp8j6655hotXLhQkydPVpcuXXTgwAGtXr1amzZtUq9evY5aU0V++uknDRkyRIGBgbr66qvVqlUrbd++XR9//HG5S+rK2rt3r3bv3q1evXpVus/flTaniIqKcm6r6nsxMjJSZ599tl577TVt27ZN7dq106JFiyTJo/OrS5cuCg0N1Zo1a8p9/5V1rOdudf3977l9+/Y655xz9MEHH+iFF15w+5n10UcfqaCgQBdeeKEkz88pAEdhdXIDYI3SWYdly5aZ9PR0s2fPHrNw4UITFxdngoOD3S4pGTVqlOnWrZvb/07a7XYzcOBA0759e+e2mTNnVvq/s6WX5bzxxhvGz8+v3KUyzz//vJFk1qxZ49xWdsbJGGOmT59uAgMDTWZmpnNbQUGBiYqKcpsFuvLKK03Tpk1NRkaG29e48MILTWRkpHM2qHQmpU2bNtW6HGvs2LFGUqUzUsYY88EHHxhJ5sknnzTGuP63PjQ01Pz555/O/b799lsjydx8883ObdV9n0v/7gYPHux2+ZIxpsLXUTpT9vrrrzu3He1SvcpmnDp37mwKCgqc25944gkjyTlzVlBQYJo0aWL69u1rioqKnPvNnz/fSKpyxunmm282ksyPP/541P1Klf7v/N9nAM855xzTpEkTt20VvS/JycmmTZs2bttatmxpJJnFixeX2786z3Ho0CETHh5u+vfvX+5yqrKXplV2WZwn3x+SjJ+fn/n111/LPY/+NuMUGRlpJk2aVG6/siqrqaIZp6FDh5rw8HDzxx9/VPoaK7Js2bJys8Olhg0bZjp16mTS09NNenq62bx5s7n11luNJHP66ae77duzZ08TGRl51K81d+5cI8ksWrTIGGPMSSedVOUxFenQoYM59dRTj7qPp+eupzNOFf09L1mypML38rTTTnM7Jz05pwAcHV31AB83evRoxcXFKSkpSeeff74aNWqkRYsWOWcHMjMz9cUXX+iCCy5QTk6OMjIylJGRoQMHDig5OVm///67swvf+++/rx49elT4P7M2m02S9N5776lz587q1KmT87kyMjI0cuRISdKXX35Zaa3jx49XUVGRPvjgA+e2zz//XIcOHdL48eMlORayv//++zrzzDNljHH7GsnJycrKytL69evdnnfChAkKDQ2t8r3KycmRJIWHh1e6T+lYdna22/axY8eqefPmzs/79eun/v3767PPPpPk2ftc6qqrriq3WL/s6ygqKtKBAwfUrl07RUVFlXvdnpo4caLb/2wPGTJEkmPBvSR9//33OnDggK666iq3pgSXXHKJ2wxmZUrfs6O9vxW55ppr3D4fMmSIDhw44PZ3UPZ9ycrKUkZGhoYNG6YdO3YoKyvL7fjWrVs7Zy/Lqs5zLF26VDk5OZo2bVq55iql3wNH4+n3x7Bhw9SlS5cqnzcqKkrffvutW9e4Y5Wenq6VK1fqiiuu0AknnOA2VtVrPHDggCRVej5s3rxZcXFxiouLU6dOnfTII4/orLPOKtcKPScnp8rz5O/fi9nZ2R6fW6W1VtXy/ljP3eqq6O955MiRio2N1YIFC5zbDh48qKVLlzp/HkrH9zMXgDsu1QN83DPPPKMOHTooKytLr7zyilauXKng4GDn+LZt22SM0YwZMzRjxowKnyMtLU3NmzfX9u3bdd555x316/3+++/atGmT4uLiKn2uyvTo0UOdOnXSggULdOWVV0pyXKYXGxvr/CUgPT1dhw4d0osvvqgXX3yxWl+jdevWR625VOkvRTk5OW6XDZVVWbhq3759uX07dOigd999V5Jn7/PR6s7Ly9OcOXP06quvau/evW7t0f8eEDz191+SS3/5PXjwoCQ578nTrl07t/0CAgIqvYSsrIiICEmu97Am6ip9zjVr1mjWrFlau3atjhw54rZ/VlaWIiMjnZ9Xdj5U5zm2b98uSeratatHr6GUp98f1T13H374YU2YMEFJSUnq3bu3TjvtNF122WVq06aNxzWWBuVjfY2SKm3b36pVK82bN092u13bt2/X/fffr/T09HIhNDw8vMow8/fvxYiICGftntZaVSA81nO3uir6ew4ICNB5552nt956SwUFBQoODtYHH3ygoqIit+B0PD9zAbgjOAE+rl+/furTp48kx6zI4MGDdfHFF2vLli1q3Lix8/4pU6dOrfB/4aXyvygfjd1uV7du3TR37twKx5OSko56/Pjx43X//fcrIyND4eHhWrRokS666CLnDEdpvf/3f/9Xbi1Uqe7du7t9Xp3ZJsmxBuijjz7STz/9pKFDh1a4z08//SRJ1ZoFKOtY3ueK6r7++uv16quv6qabbtKAAQMUGRkpm82mCy+8sNJ74VRXZa2oK/sl2FOdOnWSJP3888/q2bNntY+rqq7t27dr1KhR6tSpk+bOnaukpCQFBQXps88+02OPPVbufanoffX0OY6Vp98f1T13L7jgAg0ZMkQffvihPv/8cz3yyCN66KGH9MEHH+jUU0897rqrq0mTJpJcYfvvGjVq5LY2cNCgQerVq5fuuOMOPfnkk87tnTt31oYNG7R79+5ywbnU378XO3XqpB9//FF79uyp8udMWQcPHqzwPz7K8vTcrSyIlZSUVLi9sr/nCy+8UC+88IL+97//aezYsXr33XfVqVMn9ejRw7nP8f7MBeBCcALg5O/vrzlz5mjEiBF6+umnNW3aNOf/SAcGBrr9QlORtm3b6pdffqlyn40bN2rUqFHVunTp78aPH6/Zs2fr/fffV0JCgrKzs52LoCUpLi5O4eHhKikpqbJeT51xxhmaM2eOXn/99QqDU0lJid566y1FR0dr0KBBbmO///57uf23bt3qnInx5H0+moULF2rChAl69NFHndvy8/N16NAht/2O5b2vSunNTLdt26YRI0Y4txcXF2vXrl3lAuvfnXrqqfL399d//vOfGl1k//HHH6ugoECLFi1y+yXbk0uUqvscbdu2lST98ssvR/0Phcre/+P9/jiapk2b6rrrrtN1112ntLQ09erVS/fff78zOFX365Weq1V9r1ekNGDs3LmzWvt3795d//d//6cXXnhBU6dOdb73Z5xxht5++229/vrruuuuu8odl52drf/+97/q1KmT8+/hzDPP1Ntvv63//Oc/mj59erW+fnFxsfbs2aOzzjrrqPt5eu5GR0eX+56UXLO21TV06FA1bdpUCxYs0ODBg/XFF1/ozjvvdNunNs8pwNewxgmAm+HDh6tfv356/PHHlZ+fr/j4eA0fPlwvvPCC9u/fX27/9PR05+PzzjtPGzdu1Icfflhuv9L//b/gggu0d+9ezZs3r9w+eXl5zu5wlencubO6deumBQsWaMGCBWratKlbiPH399d5552n999/v8Jf7MrW66mBAwdq9OjRevXVV/XJJ5+UG7/zzju1detW3XbbbeX+h/ijjz5yW6P03Xff6dtvv3X+0urJ+3w0/v7+5WaAnnrqqXL/k92oUSNJqvCXt2PVp08fNWnSRPPmzVNxcbFz+5tvvlnpDENZSUlJuuqqq/T555/rqaeeKjdut9v16KOP6s8///SortIZqb9ftvjqq6/W+HOMGTNG4eHhmjNnjvLz893Gyh7bqFGjCi+dPN7vj4qUlJSU+1rx8fFq1qyZCgoKqqzp7+Li4jR06FC98sor2r17t9tYVbOPzZs3V1JSkr7//vtq13/bbbepqKjIbcbk/PPPV5cuXfTggw+Wey673a5rr71WBw8e1KxZs9yO6datm+6//36tXbu23NfJyckpFzp+++035efna+DAgUet0dNzt23btsrKynLOiknS/v37K/zZeTR+fn46//zz9fHHH+uNN95QcXGx22V6Uu2cU4CvYsYJQDm33nqrxo0bp/nz5+uaa67RM888o8GDB6tbt2666qqr1KZNG6Wmpmrt2rX6888/tXHjRudxCxcu1Lhx43TFFVeod+/eyszM1KJFi/T888+rR48euvTSS/Xuu+/qmmuu0ZdffqlBgwappKREmzdv1rvvvqslS5Y4Lx2szPjx4zVz5kyFhIToyiuvlJ+f+/8BPfjgg/ryyy/Vv39/XXXVVerSpYsyMzO1fv16LVu2TJmZmcf83rz++usaNWqUzj77bF188cUaMmSICgoK9MEHH2jFihUaP368br311nLHtWvXToMHD9a1116rgoICPf7442rSpIluu+025z7VfZ+P5owzztAbb7yhyMhIdenSRWvXrtWyZcucl0iV6tmzp/z9/fXQQw8pKytLwcHBGjlypOLj44/5vQkKCtLdd9+t66+/XiNHjtQFF1ygXbt2af78+Wrbtm21/rf70Ucf1fbt23XDDTfogw8+0BlnnKHo6Gjt3r1b7733njZv3uw2w1gdY8aMUVBQkM4880z961//0uHDhzVv3jzFx8dXGFKP5zkiIiL02GOP6Z///Kf69u2riy++WNHR0dq4caOOHDmi1157TZLUu3dvLViwQFOmTFHfvn3VuHFjnXnmmTXy/fF3OTk5atGihc4//3z16NFDjRs31rJly7Ru3Tq3mcnKaqrIk08+qcGDB6tXr166+uqr1bp1a+3atUuffvqpNmzYcNR6zj77bH344YfVWjskOS61O+200/TSSy9pxowZatKkiYKCgrRw4UKNGjVKgwcP1sSJE9WnTx8dOnRIb731ltavX69bbrnF7VwJDAzUBx98oNGjR2vo0KG64IILNGjQIAUGBurXX391zhaXbae+dOlShYWF6eSTT66yTk/O3QsvvFC33367zjnnHN1www06cuSInnvuOXXo0MHjJi7jx4/XU089pVmzZqlbt27lbitQG+cU4LPqvpEfgPqgshvgGuO4M33btm1N27Ztne2ut2/fbi677DKTmJhoAgMDTfPmzc0ZZ5xhFi5c6HbsgQMHzOTJk03z5s2dN1qcMGGCW2vwwsJC89BDD5kTTzzRBAcHm+joaNO7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THAbCwwMVKtWrfToo4/WaHFAlQhOAAAAqAPVDk6lDRlat26tdevWKTY2ttaKAqolb7+Us1WSTYofYnU1AAAA8GIer3HauXNnbdQBeC5tpePPqO5SULS1tQAAAMCreRycJCk3N1dfffWVdu/ercLCQrexG264oUYKA6rEZXoAAACoIx4Hpx9//FGnnXaajhw5otzcXMXExCgjI0NhYWGKj48nOKHucONbAAAA1BGP7+N0880368wzz9TBgwcVGhqqb775Rn/88Yd69+6tf//737VRI1BefrqU9ZvjMTe+BQAAQC3zODht2LBBt9xyi/z8/OTv76+CggIlJSXp4Ycf1h133FEbNQLlla5vijxRCqFRCQAAAGqXx8EpMDDQeVPa+Ph47d69W5IUGRmpPXv21Gx1QGVY3wQAAIA65PEap5NOOknr1q1T+/btNWzYMM2cOVMZGRl644031LVr19qoESiP4AQAAIA65PGM0wMPPKCmTZtKku6//35FR0fr2muvVXp6ul544YUaLxAopyBTOvSz43E865sAAABQ+zyecerTp4/zcXx8vBYvXlyjBQFVSl8tyUgRHaXQRKurAQAAgA/weMapMuvXr9cZZ5xRU08HVI7L9AAAAFDHPApOS5Ys0dSpU3XHHXdox44dkqTNmzdr7Nix6tu3r+x2e60UCbghOAEAAKCOVftSvZdffllXXXWVYmJidPDgQb300kuaO3eurr/+eo0fP16//PKLOnfuXJu1AlJhlnTwR8djghMAAADqSLVnnJ544gk99NBDysjI0LvvvquMjAw9++yz+vnnn/X8888TmlA30tdIxi41biuFNbe6GgAAAPiIagen7du3a9y4cZKkc889VwEBAXrkkUfUokWLWisOKIfL9AAAAGCBagenvLw8hYWFSZJsNpuCg4OdbcmBOkNwAgAAgAU8akf+0ksvqXHjxpKk4uJizZ8/X7GxsW773HDDDTVXHVBW0WEp83vH4wSCEwAAAOqOzRhjqrNjq1atZLPZjv5kNpuz2159lZ2drcjISGVlZSkiIsLqcuCJ/Z9LXyZLjVpKZ++yuhoAAAA0cJ5kg2rPOO3atet46wKOD5fpAQAAwCI1dgNcoNYRnAAAAGARghMahuIj0oHvHI/jh1pbCwAAAHwOwQkNQ8Y3kr1ICm3muIcTAAAAUIcITmgYyl6mV0WTEgAAAKCmEZzQMLC+CQAAABY6puC0fft23XXXXbrooouUlpYmSfrf//6nX3/9tUaLAyRJJfmOS/UkghMAAAAs4XFw+uqrr9StWzd9++23+uCDD3T48GFJ0saNGzVr1qwaLxDQge8ke4EUkiBFdLS6GgAAAPggj4PTtGnTdN9992np0qUKCgpybh85cqS++eabGi0OkCSlll6mN5T1TQAAALCEx8Hp559/1jnnnFNue3x8vDIyMmqkKMAN65sAAABgMY+DU1RUlPbv319u+48//qjmzZvXSFGAU0mhlPG14zHBCQAAABbxODhdeOGFuv3225WSkiKbzSa73a41a9Zo6tSpuuyyy2qjRviyzO+lkjwpuIkU2cXqagAAAOCjPA5ODzzwgDp16qSkpCQdPnxYXbp00dChQzVw4EDdddddtVEjfFnpZXpxQyUb3fMBAABgjQBPDwgKCtK8efM0Y8YM/fLLLzp8+LBOOukktW/fvjbqg69jfRMAAADqAY+D0+rVqzV48GCdcMIJOuGEE2qjJsDBXiylr3E8TiA4AQAAwDoeX/s0cuRItW7dWnfccYd+++232qgJcMhcLxUflgKjpMhuVlcDAAAAH+ZxcNq3b59uueUWffXVV+ratat69uypRx55RH/++Wdt1Adflr7S8Wf8EMnP39paAAAA4NM8Dk6xsbGaPHmy1qxZo+3bt2vcuHF67bXX1KpVK40cObI2aoSvSmV9EwAAAOqH42pT1rp1a02bNk0PPvigunXrpq+++qqm6oKvs5dI6ascjwlOAAAAsNgxB6c1a9bouuuuU9OmTXXxxRera9eu+vTTT2uyNviyQz9JRVlSQLgU3dPqagAAAODjPO6qN336dL3zzjvat2+fTj75ZD3xxBM6++yzFRYWVhv1wVc57980WPLz+DQFAAAAapTHv5GuXLlSt956qy644ALFxsbWRk2AKzjRhhwAAAD1gMfBac2aNbVRB+Bi7FJaaUc9ghMAAACsV63gtGjRIp166qkKDAzUokWLjrrvWWedVSOFwYdl/SoVZkoBjaSY3lZXAwAAAFQvOI0dO1YpKSmKj4/X2LFjK93PZrOppKSkpmqDryptQx47UPILtLYWAAAAQNUMTna7vcLHQK1I4/5NAAAAqF88bkf++uuvq6CgoNz2wsJCvf766zVSFHyYMVI665sAAABQv3gcnCZOnKis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fnBezrdjxw599tlnOu200+qkZjQ8DeV34ACrC/BWGRkZKikpUUJCgtv2hIQEbd68ucJjUlJSKtw/JSWl1upE/XEs58zf3X777WrWrFm5Hz7wTsdyzqxevVovv/yyNmzYUAcVor45lnNmx44d+uKLL3TJJZfos88+07Zt23TdddepqKhIs2bNqouyYaFjOWcuvvhiZWRkaPDgwTLGqLi4WNdccw2X6qFSlf0OnJ2drby8PIWGhlpUmTtmnAAv8eCDD+qdd97Rhx9+qJCQEKvLQT2Uk5OjSy+9VPPmzVNsbKzV5aCBsNvtio+P14svvqjevXtr/PjxuvPOO/X8889bXRrqqRUrVuiBBx7Qs88+q/Xr1+uDDz7Qp59+qnvvvdfq0oDjwoxTLYmNjZW/v79SU1PdtqempioxMbHCYxITEz3aH97lWM6ZUv/+97/14IMPatmyZerevXttlol6xNNzZvv27dq1a5fOPPNM5za73S5JCggI0JYtW9S2bdvaLRqWOpafM02bNlVgYKD8/f2d2zp37qyUlBQVFhYqKCioVmuGtY7lnJkxY4YuvfRS/fOf/5QkdevWTbm5ubr66qt15513ys+P/7eHu8p+B46IiKg3s00SM061JigoSL1799by5cud2+x2u5YvX64BAwZUeMyAAQPc9pekpUuXVro/vMuxnDOS9PDDD+vee+/V4sWL1adPn7ooFfWEp+dMp06d9PPPP2vDhg3Oj7POOsvZxSgpKakuy4cFjuXnzKBBg7Rt2zZnyJakrVu3qmnTpoQmH3As58yRI0fKhaPS4G2Mqb1i0WA1mN+Bre5O4c3eeecdExwcbObPn29+++03c/XVV5uoqCiTkpJijDHm0ksvNdOmTXPuv2bNGhMQEGD+/e9/m02bNplZs2aZwMBA8/PPP1v1ElDHPD1nHnzwQRMUFGQWLlxo9u/f7/zIycmx6iWgjnl6zvwdXfV8j6fnzO7du014eLiZPHmy2bJli/nkk09MfHy8ue+++6x6Cahjnp4zs2bNMuHh4ebtt982O3bsMJ9//rlp27atueCCC6x6CahjOTk55scffzQ//vijkWTmzp1rfvzxR/PHH38YY4yZNm2aufTSS53779ixw4SFhZlbb73VbNq0yTzzzDPG39/fLF682KqXUCGCUy176qmnzAknnGCCgoJMv379zDfffOMcGzZs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O7vK19WrVy/t3LlT//vf/7Rs2TJdcMEFGj16tBYuXFjlsZU588wzZYzRp59+qr59+2rVqlV67LHHnOOHDx/W7Nmzde6555Y7NiQkpNLnDQoKcv4dPPjggzr99NM1e/Zs3XvvvZKkd955R1OnTtWjjz6qAQMGKDw8XI888oi+/fbbo9Z7+PBh9e7d2y2wlqovDUAAoKEgOAEAyvnhhx9kt9v16KOPOmdTStfTHE2HDh3UoUMH3Xzzzbrooov06quv6pxzzlGvXr3022+/lQtoVfHz86vwmIiICDVr1kxr1qzRsGHDnNvXrFmjfv36ue03fvx4jR8/Xueff75OOeUUZWZmKiYmxu35StcTlZSUHLWekJAQnXvuuXrzzTe1bds2dezYUb169XKO9+rVS1u2bPH4df7dXXfdpZEjR+raa691vs6BAwfquuuuc+7z9xmjoKCgcvX36tVLCxYsUHx8vCIiIo6rJgDwdTSHAACU065dOxUVFempp57Sjh079MYbb+j555+vdP+8vDxNnjxZK1as0B9//KE1a9Zo3bp1zkvwbr/9dn399deaPHmyNmzYoN9//13//e9/PW4OUdatt96qhx56SAsWLNCWLVs0bdo0bdiwQTfeeKMkae7cuXr77be1efNmbd26Ve+9954SExMrvGlvfHy8QkNDtXjxYqWmpiorK6vSr3vJJZfo008/1SuvvOJsClFq5syZev311zV79mz9+uuv2rRpk9555x3dddddHr22AQMGqHv37nrggQckSe3bt9f333+vJUuWaOvWrZoxY4bWrVvndkyrVq30008/acuWLcrIyFBRUZEuueQSxcbG6uyzz9aqVau0c+dOrVixQjfccIP+/PNPj2oCAF9HcAIAlNOjRw/NnTtXDz30kLp27ao333zTrZX33/n7++vAgQO67LLL1KFDB11wwQU69dRTNXv2bElS9+7d9dVXX2nr1q0aMmSITjrpJM2cOVPNmjU75hpvuOEGTZkyRbfccou6deumxYsXa9GiRWrfvr0kx2V+Dz/8sPr06aO+fftq165d+uyzz5wzaGUFBAToySef1AsvvKBmzZrp7LPPrvTrjhw5UjExMdqyZYsuvvhit7Hk5GR98skn+vzzz9W3b1/94x//0GOPPaaWLVt6/PpuvvlmvfTSS9qzZ4/+9a9/6dxzz9X48ePVv39/HThwwG32SZKuuuoqdezYUX369FFcXJzWrFmjsLAwrVy5UieccILOPfdcde7cWVdeeaXy8/OZgQIAD9mMMcbqIgAAAACgPmPGCQAAAACqQHACAAAAgCoQnAAAAACgCgQnAAAAAKgCwQkAAAAAqkBwAgAAAIAqEJwAAAAAoAoEJwAAAACoAsEJAAAAAKpAcAIAAACAKhCcAAAAAKAK/w/KsZJsINJTAgAAAABJRU5ErkJggg==",
      "text/plain": [
       "<Figure size 1000x800 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "lr_model_perf.build_roc_plot()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6def897e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:37.631079Z",
     "iopub.status.busy": "2024-07-31T15:00:37.630130Z",
     "iopub.status.idle": "2024-07-31T15:00:37.718691Z",
     "shell.execute_reply": "2024-07-31T15:00:37.717636Z"
    },
    "papermill": {
     "duration": 0.104968,
     "end_time": "2024-07-31T15:00:37.721071",
     "exception": false,
     "start_time": "2024-07-31T15:00:37.616103",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6868686868686869"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "svc_model = SVC(random_state=0).fit(X, y)\n",
    "svc_y_test = svc_model.predict(X_test)\n",
    "svc_model.score(X, y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "c560a517",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-31T15:00:37.748329Z",
     "iopub.status.busy": "2024-07-31T15:00:37.747988Z",
     "iopub.status.idle": "2024-07-31T15:00:37.764287Z",
     "shell.execute_reply": "2024-07-31T15:00:37.763304Z"
    },
    "papermill": {
     "duration": 0.032427,
     "end_time": "2024-07-31T15:00:37.766475",
     "exception": false,
     "start_time": "2024-07-31T15:00:37.734048",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7912457912457912"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.naive_bayes import GaussianNB\n",
    "\n",
    "gnb_model = GaussianNB()\n",
    "gnb_y_pred = gnb_model.fit(X, y).predict(X)\n",
    "gnb_model.score(X, y)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "780d88e9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-07-30T17:25:29.307290Z",
     "iopub.status.busy": "2024-07-30T17:25:29.306487Z",
     "iopub.status.idle": "2024-07-30T17:25:33.486421Z",
     "shell.execute_reply": "2024-07-30T17:25:33.485121Z",
     "shell.execute_reply.started": "2024-07-30T17:25:29.307174Z"
    },
    "papermill": {
     "duration": 0.012559,
     "end_time": "2024-07-31T15:00:37.792089",
     "exception": false,
     "start_time": "2024-07-31T15:00:37.779530",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#Gridsearch for Logistic regression\n",
    "grid = {\n",
    "    \"C\" : np.logspace(-3,3,7),\n",
    "    \"penalty\" : [\"l1\", \"l2\", \"elasicnet\", None]\n",
    "}\n",
    "\n",
    "logreg = LogisticRegression()\n",
    "logreg_cv = GridSearchCV(logreg, grid, cv=10)\n",
    "logreg_cv.fit(X, y)\n",
    "\n",
    "print(\"tuned hpyerparameters :(best parameters) \",logreg_cv.best_params_)\n",
    "print(\"accuracy :\",logreg_cv.best_score_)"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 30746,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 8.206671,
   "end_time": "2024-07-31T15:00:38.425553",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-07-31T15:00:30.218882",
   "version": "2.5.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
